{"pageProps":{"post":{"title":" 码代码","comments":true,"date":"2021-02-17T00:00:00.000Z","tags":[],"categories":["总结"],"modifyTime":"2021-03-27 14:49:15 +0800","createTime":"2021-10-11 11:55:16 +0800","logs":[{"status":["M"],"files":["\"2021-03-27 \\347\\240\\201\\344\\273\\243\\347\\240\\201.md\""],"abbrevHash":"9b65aea","hash":"9b65aea13e08b46aed87ab3b15f8883a0948c858","subject":"Update 2021-03-27 码代码.md","authorName":"yajw","authorDate":"2021-10-11 11:55:16 +0800"},{"status":["M"],"files":["\"2021-03-27 \\347\\240\\201\\344\\273\\243\\347\\240\\201.md\""],"abbrevHash":"b38ea2e","hash":"b38ea2e054d5c813abfb93a2598414c8821a7a48","subject":"Update 2021-03-27 码代码.md","authorName":"yajw","authorDate":"2021-10-11 11:53:23 +0800"},{"status":["M"],"files":["\"2021-03-27 \\347\\240\\201\\344\\273\\243\\347\\240\\201.md\""],"abbrevHash":"4206d8f","hash":"4206d8fd20d9a7309ec7423f1d33aec28ede62d0","subject":"Update 2021-03-27 码代码.md","authorName":"yajw","authorDate":"2021-10-11 11:49:59 +0800"},{"status":["A"],"files":["\"2021-03-27 \\347\\240\\201\\344\\273\\243\\347\\240\\201.md\""],"abbrevHash":"f4f4061","hash":"f4f406175bde5279c552d8bac1c05cf7bb72d58e","subject":"Copy old posts","authorName":"yajw","authorDate":"2021-03-27 14:49:15 +0800"}],"link":"2021-03-27%20%E7%A0%81%E4%BB%A3%E7%A0%81","id":"9fcc6b32-16ca-4407-b75a-12bbc9fbef8b","content":"<p>日志：#日志# api请求的，请求异常一定要有日志</p>\n<p>#异常处理# 封装的异常，要保留原始异常信息，异常堆栈中要能追溯原始异常的堆栈</p>\n<p>打日志一个非常重要的点（特别是支付场景）：\n在请求前打，请求之后再打，而不是只在一边打</p>\n<p>#软件工程师核心能力# 读代码\n并不是每个项目都是从零开始的，大多数时候都是给一个现有的仓库做维护，好比给一个房子添砖加瓦、做改造。\n如果不了解手头做的事，只追求把自己的那部分做好，不了解改动会对现有系统产生什么样的影响，可能会导致什么后果，就不算是合格的，很可能有一天会砸到自己、碰到别人。\n怎么避免呢？依靠对业务的理解和判断（和领域专家、团队沟通），对实现的理解（读代码）。</p>\n<p>命名一定要很明确，无论是业务系统，还是技术组件，明确表达是干啥的。\nps: 看见项目代码中各种set_xxx, process_xxx就头大。。。</p>\n<p>对扩展开放，#开原则#的应用：\n实现sdk的版本迭代时，提供一个最基础的方法，方便用户找不到封装方法时，自己还能在这个最基础的方法上实现一个，达到用户端扩展的目的。</p>\n<p>延伸：有依赖关系的且多变的地方，强调简单、灵活。</p>\n<p>api设计：简单，傻瓜化，不要指望调用方处理复杂的逻辑。</p>\n<h2>抽象：从业务角度去抽象代码，而不是实现角度</h2>\n<p>实际的例子：一个类似优酷的视频平台，现有的服务已经支持了点播视频，现在需要增加一个直播业务，并且产品希望在合理的规则约束下，尽可能复用点播的业务逻辑。\n在增加新功能的时候，发现现有实现严重耦合了点播视频的一些东西。\n从业务角度抽象代码，背后的逻辑是，代码要合理对现有业务逻辑做抽象，能够在适应新的业务时灵活调整。</p>\n<p>抽象本身也是有成本的，技术团队要在扩展现有系统能力的成本、抽象的成本直接做取舍。</p>\n"}},"__N_SSG":true}