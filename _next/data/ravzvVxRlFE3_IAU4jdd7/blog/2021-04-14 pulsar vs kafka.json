{"pageProps":{"post":{"tags":["kafka","pulsar","架构"],"categories":["开源组件"],"title":" pulsar vs kafka","modifyTime":"2021-04-14 10:28:53 +0800","createTime":"2021-04-14 12:07:52 +0800","logs":[{"status":["M"],"files":["2021-04-14 pulsar vs kafka.md"],"abbrevHash":"1e0a4d2","hash":"1e0a4d2cacedf5890b8f03257325b71c6179d6ed","subject":"Update 2021-04-14 pulsar vs kafka.md","authorName":"yajw","authorDate":"2021-04-14 12:07:52 +0800"},{"status":["M"],"files":["2021-04-14 pulsar vs kafka.md"],"abbrevHash":"36135c3","hash":"36135c3a3c85a6687079496471ade5d581756ba9","subject":"Update 2021-04-14 pulsar vs kafka.md","authorName":"yajw","authorDate":"2021-04-14 12:03:02 +0800"},{"status":["M"],"files":["2021-04-14 pulsar vs kafka.md"],"abbrevHash":"79652fa","hash":"79652fa09479fb5bbd2c2240888f7d6be1d94d9d","subject":"Update 2021-04-14 pulsar vs kafka.md","authorName":"yajw","authorDate":"2021-04-14 11:47:41 +0800"},{"status":["M"],"files":["2021-04-14 pulsar vs kafka.md"],"abbrevHash":"29d70ca","hash":"29d70ca829f6a0cc9f8c947bea9610c1b903cc06","subject":"Update 2021-04-14 pulsar vs kafka.md","authorName":"yajw","authorDate":"2021-04-14 11:46:22 +0800"},{"status":["M"],"files":["2021-04-14 pulsar vs kafka.md"],"abbrevHash":"5fe1500","hash":"5fe15007126f5505f85a1762909f7545468284ad","subject":"Update 2021-04-14 pulsar vs kafka.md","authorName":"yajw","authorDate":"2021-04-14 11:32:07 +0800"},{"status":["A"],"files":["2021-04-14 pulsar vs kafka.md"],"abbrevHash":"a5065e7","hash":"a5065e7e6e831d3a43af5d1737a06d381986f8d2","subject":"Create 2021-04-14 pulsar vs kafka.md","authorName":"yajw","authorDate":"2021-04-14 10:28:53 +0800"}],"link":"2021-04-14%20pulsar%20vs%20kafka","id":"47f3eff4-63a6-450b-a444-d727b20ae697","comments":false,"content":"<h1>消息模型</h1>\n<p>消息模型的要点：发布和订阅，ack，消息何时删除。</p>\n<p>流模型和队列模型区别：消费方是否关心顺序</p>\n<p>Kafka：流模式\nRabbitMQ：共享队列，不保证顺序</p>\n<h2>Apache Bookkeeper</h2>\n<p>Kafka</p>\n<ul>\n<li>Consumer partition rebalance</li>\n</ul>\n<h1>Pulsar</h1>\n<p>pulsar是yahoo的项目。</p>\n<p>几种消费模式：独占，failover，共享。对比kafka提供只独占，RabbitMQ只提供共享。</p>\n<p>ack：有选择提交特性（提交一个特定的），独占和failover可以单个或者累积确认，共享只能选择提交。类似selective ack，不过是单点。而kafka只能累积确认(offset)。</p>\n<p>pulsar实现的是游标的方式管理ack（游标如何实现单个确认？）。</p>\n<p>消息保留：</p>\n<ol>\n<li>TTL：超出TTL才会被删除</li>\n<li>没有TTL，等所有订阅(subscription)都确认了就可以删除</li>\n</ol>\n<p>分层架构：有点类似mysql的存储引擎架构，存储借助bookkeeper实现多副本分布式一致性存储，一个具体的topic交给broker负责。</p>\n<p>topic发生故障时，只需要把topic的控制权移交给其他节点，无须数据复制。</p>\n<p>存储节点故障时，借助bookkeeper能够平滑切换。对比kafka需要partition备份完成后才能可用。</p>\n<p>分区和分区路由：segment方式分片（简单理解为相比kafka的partition有更灵活的分片粒度控制），支持hash（保证有序）</p>\n<p>持久化：</p>\n<ol>\n<li>broker写多个节点，大多数节点构成的quorum返回成功后才发ack给生产者。每个节点强制写日志到磁盘后才返回成功，断电也能保证不丢。</li>\n</ol>\n<p>bookkeeper和broker都需要依赖zk：\n<img src=\"https://pulsar.apache.org/docs/assets/pulsar-system-architecture.png\" alt=\"\"></p>\n<p>对比：\n<img src=\"https://static.geekbang.org/infoq/5beae774be269.png\" alt=\"\"></p>\n<p>总结卖点：</p>\n<ol>\n<li>\n<p>既能提供高性能的流模型（kafka拥有的），也能够提供队列模型（RabbitMQ提供的）</p>\n</li>\n<li>\n<p>借助Bookkeeper实现存储的扩展（对比kafka受到单机partition的限制），这也是pulsar解决的kafka很难处理的问题（更好的存储能力）</p>\n</li>\n<li>\n<p>借助分层架构实现处理能力的扩展（负责计算的broker和底层负责存储的bookkeepr分离，计算是无状态的可以水平扩展）</p>\n</li>\n<li>\n<p>多租户，有业务(property)/命名空间(namespace)区分</p>\n</li>\n<li>\n<p>查询：能够借助pulsar SQL查询，或者借助presto直接查询bookkeeper</p>\n</li>\n<li>\n<p><a href=\"https://www.infoq.cn/article/1uaxfkwuhukty1t_5gpq\">比拼 Kafka, 大数据分析新秀 Pulsar 到底好在哪</a></p>\n</li>\n<li>\n<p><a href=\"https://www.infoq.cn/article/2017/11/Apache-Pulsar-brief-introduction?utm_source=related_read&#x26;utm_medium=article\">发布订阅消息系统 Apache Pulsar 简介</a></p>\n</li>\n<li>\n<p><a href=\"https://www.infoq.cn/profile/C100E54DC3C5D0/publish/all\">infoq作者主页</a></p>\n</li>\n</ol>\n"}},"__N_SSG":true}