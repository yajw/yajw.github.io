{"pageProps":{"post":{"title":" Manacher算法","comments":true,"date":"2020-02-26T14:39:10.000Z","tags":["算法"],"modifyTime":"2021-03-27 14:49:15 +0800","createTime":"2021-03-27 14:49:15 +0800","logs":[{"status":["A"],"files":["\"2021-03-27 Manacher\\347\\256\\227\\346\\263\\225.md\""],"abbrevHash":"f4f4061","hash":"f4f406175bde5279c552d8bac1c05cf7bb72d58e","subject":"Copy old posts","authorName":"yajw","authorDate":"2021-03-27 14:49:15 +0800"}],"link":"2021-03-27%20Manacher%E7%AE%97%E6%B3%95","id":"56993ff9-98be-414c-bcec-d2d04689205e","categories":[],"content":"<p>复习（重新学习）了一遍Manacher算法，比较靠谱的一篇讲解：\nhttps://www.felix021.com/blog/read.php?2040。</p>\n<p>主要思想：利用当前位置字符所在的已知最大回文串的对称性质，避免了对当前位置字符已知回文结构的检查。</p>\n<pre><code class=\"language-python\">C, R = 0, -1\nfor i in range(0, len(t)):\n    rad = min(p[2*C-i], R-i) if i &#x3C;= R else 0\n    while i-rad-1>=0 and i+rad+1&#x3C;len(t) and t[i-rad-1]==t[i+rad+1]:\n        rad += 1\n    p[i] = rad\n    if R &#x3C; i+rad:\n        R = i+rad\n        C = i\n</code></pre>\n"}},"__N_SSG":true}