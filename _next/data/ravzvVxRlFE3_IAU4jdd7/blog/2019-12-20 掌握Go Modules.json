{"pageProps":{"post":{"title":" 掌握Go Modules","comments":true,"date":"2021-06-02T00:00:00.000Z","tags":["Go Modules"],"categories":["笔记"],"modifyTime":"2021-06-02 09:22:02 +0800","createTime":"2021-06-02 09:22:02 +0800","logs":[{"status":["A"],"files":["\"2019-12-20 \\346\\216\\214\\346\\217\\241Go Modules.md\""],"abbrevHash":"6ef83ba","hash":"6ef83ba340f7a22fee287a7f31c466b6687c4338","subject":"Create 2019-12-20 掌握Go Modules.md","authorName":"yajw","authorDate":"2021-06-02 09:22:02 +0800"}],"link":"2019-12-20%20%E6%8E%8C%E6%8F%A1Go%20Modules","id":"6a6ea220-a88e-4062-a878-64cb0abe367f","content":"<p>参考：</p>\n<ol>\n<li><a href=\"https://roberto.selbach.dev/intro-to-go-modules/\">Introduction to Go Modules</a></li>\n</ol>\n<p>参考1阅读笔记：</p>\n<ol>\n<li>如何创建一个module：在GOPATH之外创建一个目录，代码写好后执行<code>go mod init &#x3C;module name></code>，然后目录下会有一个新的go.mod文件描述了当前module。push github后别人就可以<code>go get</code>从master分支拿到了最新版本。</li>\n<li>版本：如果没指定版本号，go默认会拉去最新的tag版本</li>\n<li>执行<code>go mod init mod</code>使项目开始用go modules来管理依赖，go build会自动拉取依赖，<code>go.sum</code>定义了依赖的版本和hash</li>\n<li><code>go get -u</code>拉取大版本的最新版本，<code>go get -u=patch</code>拉取最新patch版本</li>\n<li>**Versions 2 and over should change the import path.**需要改go.mod，同时需要升级依赖，也要改import的包的path</li>\n<li><code>go mod tidy</code></li>\n<li><code>go mod vendor</code>会创建<code>/vendor</code>保存其他依赖，build时需要指定<code>go build -mod vendor</code></li>\n<li>go module消除了GOPATH，所以项目不需要放在一个特定文件夹下</li>\n</ol>\n"}},"__N_SSG":true}