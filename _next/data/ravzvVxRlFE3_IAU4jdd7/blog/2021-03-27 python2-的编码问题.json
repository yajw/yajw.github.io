{"pageProps":{"post":{"title":" python2-的编码问题","comments":true,"date":"2020-04-07T12:19:39.000Z","tags":["python2","unicode","编码"],"modifyTime":"2021-03-27 14:49:15 +0800","createTime":"2021-03-27 14:49:15 +0800","logs":[{"status":["A"],"files":["\"2021-03-27 python2-\\347\\232\\204\\347\\274\\226\\347\\240\\201\\351\\227\\256\\351\\242\\230.md\""],"abbrevHash":"f4f4061","hash":"f4f406175bde5279c552d8bac1c05cf7bb72d58e","subject":"Copy old posts","authorName":"yajw","authorDate":"2021-03-27 14:49:15 +0800"}],"link":"2021-03-27%20python2-%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98","id":"b5332086-81f5-4a07-a4b1-7dae911cfd37","categories":[],"content":"<h2>背景</h2>\n<p>这篇blog是和python2中让人抓狂的编码异常做个了断。</p>\n<p>仔细读了以下文档：</p>\n<ul>\n<li>python2 <a href=\"https://docs.python.org/2/howto/unicode.html\">Unicode HOWTO</a></li>\n<li>python3 <a href=\"https://docs.python.org/3/howto/unicode.html\">Unicode HOWTO</a></li>\n</ul>\n<h2>编码异常以及Python 2 的str和unicode</h2>\n<p>character：表示文本的最小的不可分割字符，例如\"A\", \"饕\"，\"È\"等。</p>\n<p>code point：是一个整数（注意仅仅是数值，并没有限制存储上需要几个字节），通常用16进制表示，和character能够对应起来。</p>\n<p>unicode标准：定义了character和code point之间的mapping。</p>\n<p>屏幕上的字符：是专门的图形表示元素glyph通过程序渲染的效果。</p>\n<p>换言之，屏幕上看到的字符的表示（character），对应一个code point（整数），并且对应一个特定的字符（抽象意义）。</p>\n<p>encoding： 把unicode字符串转化为字节数组，注意这里并不确定具体按照什么规则转化、怎么转化，是固定用4个字节，还是用8个字节，或者用变长，encoding没有明确这个规则。</p>\n<p>编码（以utf-8为例）：定义了encoding的规则，也就是unicode字符串和字节数组之间如何相互转化，utf-8是一种变长的规则。</p>\n<p>ascii编码：只支持0-127，如果一个code point的值超过127，encoding时就会报UnicodeEncodeError。</p>\n<pre><code class=\"language-python\">>>> u'羁绊是什么意思'.encode('ascii')\nTraceback (most recent call last):\n  File \"&#x3C;stdin>\", line 1, in &#x3C;module>\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-6: ordinal not in range(128)\n>>>\n</code></pre>\n<p>UTF-8的特点：变长，支持所有unicode code point，没有0字节，比较鲁棒（能够识别出一个字节是否是code point的开始）。</p>\n<p>上面的例子用utf-8编码：</p>\n<pre><code class=\"language-python\">>>> u'羁绊是什么意思'.encode('utf-8')\n'\\xe7\\xbe\\x81\\xe7\\xbb\\x8a\\xe6\\x98\\xaf\\xe4\\xbb\\x80\\xe4\\xb9\\x88\\xe6\\x84\\x8f\\xe6\\x80\\x9d'\n>>>\n</code></pre>\n<pre><code class=\"language-python\">>>> unicode('abcdef' + chr(255))    \nTraceback (most recent call last):\n...\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 6:\nordinal not in range(128)\n>>> unicode('\\x80abc', errors='replace')\nu'\\ufffdabc'\n>>> unicode('\\x80abc', errors='ignore')\nu'abc'\n</code></pre>\n<h2>后记</h2>\n<p>基本上看完官方文档，就能清楚python2中unicode和str的区别，以及处理常见的编码问题了，所以到这就戛然而止了。</p>\n"}},"__N_SSG":true}