{"pageProps":{"post":{"title":" 服务治理总结","comments":true,"date":"2021-02-17T00:00:00.000Z","tags":["服务治理"],"categories":["总结"],"modifyTime":"2021-03-27 14:49:15 +0800","createTime":"2021-03-27 14:49:15 +0800","logs":[{"status":["A"],"files":["\"2021-03-27 \\346\\234\\215\\345\\212\\241\\346\\262\\273\\347\\220\\206\\346\\200\\273\\347\\273\\223.md\""],"abbrevHash":"f4f4061","hash":"f4f406175bde5279c552d8bac1c05cf7bb72d58e","subject":"Copy old posts","authorName":"yajw","authorDate":"2021-03-27 14:49:15 +0800"}],"link":"2021-03-27%20%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E6%80%BB%E7%BB%93","id":"dc34a89d-58f9-468e-9fc7-2f9e5bd23846","content":"<ol>\n<li>一些认识和总结，不一定全面</li>\n<li>健康检查： http的head,get,options,nginx 健康检查：主动，被动\nupstream status: nginx_upstream_check_module\nngx_upstream_status</li>\n<li>部署方案</li>\n<li>弹性服务：backpressure思路和实现</li>\n</ol>\n<p>三板斧：可灰度、可监控、可回滚</p>\n<p>核心业务技术拆分逻辑：把不同的业务独立开，目标是增加稳定性和可维护性，实现核心业务的“高内聚，低耦合”，实现对客户的高可靠保证。\n稳定性：减少核心业务的代码层面的依赖，隔离数据库、缓存、部署等，通过职责分离降低复杂度，从而提升稳定性。\n可维护性：核心业务拆出后，关注点分离，从而更加容易聚焦和迭代，带来可维护性提升。</p>\n"}},"__N_SSG":true}