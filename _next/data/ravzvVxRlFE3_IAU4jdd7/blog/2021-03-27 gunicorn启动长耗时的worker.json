{"pageProps":{"post":{"title":" gunicorn启动长耗时的worker","comments":true,"date":"2020-05-27T20:45:51.000Z","tags":["gunicorn","python"],"modifyTime":"2021-03-27 14:49:15 +0800","createTime":"2021-03-27 14:49:15 +0800","logs":[{"status":["A"],"files":["\"2021-03-27 gunicorn\\345\\220\\257\\345\\212\\250\\351\\225\\277\\350\\200\\227\\346\\227\\266\\347\\232\\204worker.md\""],"abbrevHash":"f4f4061","hash":"f4f406175bde5279c552d8bac1c05cf7bb72d58e","subject":"Copy old posts","authorName":"yajw","authorDate":"2021-03-27 14:49:15 +0800"}],"link":"2021-03-27%20gunicorn%E5%90%AF%E5%8A%A8%E9%95%BF%E8%80%97%E6%97%B6%E7%9A%84worker","id":"9375239b-d5df-4f44-8a7f-39024746905c","categories":[],"content":"<h2>背景</h2>\n<p>线上有个使用django框架的服务，需要创建大量的django model（~25k），并且要注册到django框架。</p>\n<p>那么启动这个服务必定耗时很久，实际测下来要40s左右。</p>\n<h2>问题</h2>\n<p>线下测试时，发现gunicorn方式启动后的前几个请求总是超时，原因是worker似乎是等到请求到来时才完整启动。</p>\n<h2>如何处理</h2>\n<p>第一种方式，改进部署脚本，在gunicorn启动后，发起一次业务无关的调用来让worker完整启动，那么后续的请求就不受影响。\n不过gunicorn在运行过程中可能会kill worker，需要考虑这种情况下怎么处理。</p>\n<p>第二种方式，性能优化，把启动耗时控制在4s左右，4s是业务方可以接受的，就能彻底解决这个问题。</p>\n"}},"__N_SSG":true}