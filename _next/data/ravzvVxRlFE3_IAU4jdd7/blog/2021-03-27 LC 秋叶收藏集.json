{"pageProps":{"post":{"title":" LC 秋叶收藏集","comments":true,"date":"2020-11-09T00:00:00.000Z","tags":["LC","算法"],"categories":["算法"],"modifyTime":"2021-03-27 14:49:15 +0800","createTime":"2021-03-27 14:49:15 +0800","logs":[{"status":["A"],"files":["\"2021-03-27 LC \\347\\247\\213\\345\\217\\266\\346\\224\\266\\350\\227\\217\\351\\233\\206.md\""],"abbrevHash":"f4f4061","hash":"f4f406175bde5279c552d8bac1c05cf7bb72d58e","subject":"Copy old posts","authorName":"yajw","authorDate":"2021-03-27 14:49:15 +0800"}],"link":"2021-03-27%20LC%20%E7%A7%8B%E5%8F%B6%E6%94%B6%E8%97%8F%E9%9B%86","id":"a4a0b36d-4341-4f16-bf57-74bc2d2391a8","content":"<p><a href=\"https://leetcode-cn.com/problems/UlBDOe/\">题目链接</a></p>\n<p>想了半天没想出来，看了题解。</p>\n<p>两种解法：</p>\n<ol>\n<li>三维dp，这个类似套路，寻找状态转移方程，不熟练不容易想出来</li>\n<li>推导：这个直观，结合推导，来找效率比较高的算法，是一个通用的思路</li>\n</ol>\n<p>定义Y(i)表示以i为结尾的y的个数，R(i)则表示r的个数。</p>\n<p>M表示总的y的个数。</p>\n<p>那么答案是：</p>\n<pre><code>Y(x)+R(y) - R(x) + M - Y(y) = M + [Y(x)-R(x)] - [Y(y)-R(y)] \n</code></pre>\n<p>那么令g(x)=Y(x)-R(x)，枚举y，然后寻找最小的g(x)，就能得到答案。</p>\n<p>计算g(x)，可以维护y和r的计数器，O(1)就得到。\r\n最小的g(x) 满足<code>x&#x3C;y</code>，只需要维护当前遇到的g(x)的最小值即可，也是O(1)。</p>\n<p>所以整体复杂度O(n)，而空间复杂度可以做到O(1)。</p>\n<pre><code class=\"language-java\">class Solution {\r\n    public int minimumOperations(String leaves) {\r\n        int n = leaves.length();\r\n        int mg = 0;\r\n        int cy = 0;\r\n        int cr = 0;\r\n        int ans = n;\r\n        for (int i = 0; i &#x3C; n; i++) {\r\n            if (leaves.charAt(i) == 'y') {\r\n                cy ++ ;\r\n            } else {\r\n                cr ++;\r\n            }\r\n            int g = cy - cr;\r\n\r\n            if (i >= 1 &#x26;&#x26; i &#x3C; n-1) {\r\n                ans = Math.min(ans, mg - g);\r\n            }\r\n\r\n            if (i == 0) {\r\n                mg = g;\r\n            } else {\r\n                mg = Math.min(mg, g);\r\n            }\r\n        }\r\n        return ans + cy;\r\n    }\r\n\r\n}\n</code></pre>\n<p>自己想时，其实是按照第二种思路来的，但是没有动笔，也缺乏归纳出g(x)的思路，所以没想出来。\r\n而dp也不太熟练，就没法了。</p>\n<p>第三种思路：https://leetcode-cn.com/problems/UlBDOe/comments/588942</p>\n<p>同样是推导，不过用枚举区间的长度，和区间内y的个数做参数，转化为最大连续和问题。</p>\n<p>最大连续和问题也是dp。</p>\n"}},"__N_SSG":true}