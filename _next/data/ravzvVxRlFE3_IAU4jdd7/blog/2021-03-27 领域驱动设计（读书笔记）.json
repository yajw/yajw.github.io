{"pageProps":{"post":{"title":" 领域驱动设计（读书笔记）","comments":true,"date":"2019-11-10T17:40:01.000Z","tags":["读书","笔记"],"categories":["读书"],"modifyTime":"2021-03-27 14:49:15 +0800","createTime":"2021-03-27 14:49:15 +0800","logs":[{"status":["A"],"files":["\"2021-03-27 \\351\\242\\206\\345\\237\\237\\351\\251\\261\\345\\212\\250\\350\\256\\276\\350\\256\\241\\357\\274\\210\\350\\257\\273\\344\\271\\246\\347\\254\\224\\350\\256\\260\\357\\274\\211.md\""],"abbrevHash":"f4f4061","hash":"f4f406175bde5279c552d8bac1c05cf7bb72d58e","subject":"Copy old posts","authorName":"yajw","authorDate":"2021-03-27 14:49:15 +0800"}],"link":"2021-03-27%20%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%89","id":"03c3ef03-5b32-44fd-bffb-c1befe1f1613","content":"<h1>一 运用领域模型</h1>\n<ul>\n<li>理解软件的核心</li>\n<li>领域驱动建模解决什么问题？</li>\n<li>软件复杂性有哪些？\n<ul>\n<li>目标是什么？</li>\n<li>受哪些因素的制约？</li>\n<li>领域驱动设计的方法是怎么处理的？</li>\n</ul>\n</li>\n</ul>\n<h2>1. 消化知识</h2>\n<h3>1.1 有效建模的要素</h3>\n<ul>\n<li>模型和实现的绑定：领域和实现和设计紧密绑定</li>\n<li>模型语言：领域专家和开发人员之间的沟通语言</li>\n<li>开发一个蕴含丰富知识的模型：模型不是静态的数据，而是包含了丰富的知识</li>\n<li>提炼模型：整合模型（增删），丢弃不需要/不重要的概念</li>\n<li>头脑风暴和实验：模型实验室，通过和领域专家之间的互动，借助语言和草图，创造出有价值的模型（不断的反馈和训练）</li>\n</ul>\n<p>评价一个软件团队的有效性</p>\n<h3>1.2 知识消化</h3>\n<p>传统的瀑布模型</p>\n<ul>\n<li>程序员只理解功能，而不理解背后的原理，所以通过重构来保持软件良好地扩展。</li>\n</ul>\n<p>模型必须是精确的</p>\n<ul>\n<li>模型是经过领域专家和开发团队消化、走查后确定下来的，不严谨的模型会导致返工、加班、扯皮、失败。</li>\n<li>模型会经历演化</li>\n</ul>\n<h3>1.3 持续学习</h3>\n<p>怎么保持团队的高效率</p>\n<ul>\n<li>随着时间变化，团队人员变动，领域知识会逐渐丢失</li>\n<li>关键是形成组织，铁打的营盘，流水的兵。组织的关键是保持反馈闭环。</li>\n<li>高效率的组织保证模型的及时演化</li>\n</ul>\n<p>领域驱动设计方法中，软件的参与方：</p>\n<ol>\n<li>开发人员</li>\n<li>领域专家</li>\n<li>用户</li>\n</ol>\n<p>软件的组成：</p>\n<ol>\n<li>核心领域：需要达成共识，并持续进行维护</li>\n<li>基础设施</li>\n</ol>\n<h3>1.4 知识丰富的设计</h3>\n<p>领域驱动方法中，模型的演化导致重构</p>\n<p>领域的核型，不仅仅是一些名词概念，也包含业务规则和活动。\n领域专家的脑袋中，业务规则的应用往往很复杂，领域专家可能会给出最常见场景的一些规则，仅使用这些规则来处理实际场景是不够的。</p>\n<p><strong>领域专家也许不会意识到自己在应用规则来处理问题时，思考的过程会有多么的复杂</strong></p>\n<p>例如：</p>\n<ul>\n<li>规则之间的矛盾</li>\n<li>使用常识来弥补规则</li>\n</ul>\n<p>需要领域专家和开发人员的紧密合作来理清和提炼业务规则，消除其中的矛盾，去除无用的部分。</p>\n<p>超卖规则的实现</p>\n<ol>\n<li>卫语句</li>\n</ol>\n<ul>\n<li>不明确的，不懂业务的开发人员很难把代码和需求关联起来</li>\n<li>领域专家很难捕捉到这个规则（没有明确的业务含义）</li>\n</ul>\n<ol start=\"2\">\n<li>抽象一个OverBookingPolicy</li>\n</ol>\n<ul>\n<li>尽管命名中策略通常是策略模式时才会采用，这里策略也是业务中的术语，属于业务概念，因此仍然使用这个命名</li>\n<li>明确超卖是一种策略</li>\n<li>超卖的规则实现独立且明确</li>\n<li>明确超卖是一种业务规则，并不是一个不起眼的卫语句</li>\n<li>领域专家能捕捉到这个规则，因此容易形成反馈闭环</li>\n</ul>\n<h3>1.5 深层模型</h3>\n<blockquote>\n<p>有用的模型很少停留在表面，随着对领域和需求的理解加深...一些开始时不可能发现的抽象就会浮出水面，而它们恰恰切中问题的要害。</p>\n</blockquote>\n<p><strong>知识消化是一种探索，它永无止境</strong></p>\n<h2>2. 语言的交流和使用</h2>\n<p><strong>领域模型是软件项目的公共语言的核心</strong></p>\n<p>模型是人们头脑中形成的与项目有关的概念集合，术语和相互关系提供了模型语言的语义。</p>\n<p>模型语言十分精确，是专门为领域量身裁剪的。</p>\n<p>模型与代码应当紧绑定。</p>\n<h3>2.1 UBIQUITOUS LANGUAGE</h3>\n<p>困难所在：</p>\n<ol>\n<li>每个开发人员形成自己的抽象，但领域专家不理解这些抽象</li>\n<li>领域专家有自己的行话，但由于存在语言上的鸿沟，只能模糊地描述他们想要的东西</li>\n<li>开发人员很努力去理解自己不熟悉的领域，但也只能形成模糊的认识</li>\n<li>开发人员之间相互翻译，开发和领域专家之间相互翻译，造成概念上的混淆</li>\n<li>同一个人讲话和写东西不是一个语言</li>\n</ol>\n<p>信息流上存在瓶颈，不准确，沟通词不达意。间接的沟通，导致分裂的形成，导致软件各部分不能浑然一体。</p>\n<p><strong>如果语言支离破碎，项目必然遭遇严重问题</strong></p>\n"}},"__N_SSG":true}